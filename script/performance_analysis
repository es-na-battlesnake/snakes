#!/bin/bash
#
# Performance Trend Analysis for Battlesnake
# 
# This script analyzes performance trends across commits and provides
# actionable insights for continuous improvement.
#

set -e

RESULTS_DIR="/tmp/performance_history"
CURRENT_RESULTS="/tmp/current_performance.json"

# Create results directory if it doesn't exist
mkdir -p "$RESULTS_DIR"

# Extract performance metrics from comprehensive simulation output
extract_metrics() {
    local input_file=$1
    local output_file=$2
    
    # Parse the comprehensive results
    local win_rate=$(grep "Overall Win Rate" "$input_file" | grep -o '[0-9.]*' | head -1 || echo "0")
    local competitive_rate=$(grep "Competitive Rate" "$input_file" | grep -o '[0-9.]*' | head -1 || echo "0")
    local total_games=$(grep "Total Games" "$input_file" | grep -o '[0-9]*' | head -1 || echo "0")
    local timeout_rate=$(grep "Timeout Rate" "$input_file" | grep -o '[0-9.]*' | head -1 || echo "0")
    
    # Create JSON output
    cat > "$output_file" << EOF
{
    "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
    "commit": "${GITHUB_SHA:-$(git rev-parse HEAD 2>/dev/null || echo 'unknown')}",
    "metrics": {
        "win_rate": $win_rate,
        "competitive_rate": $competitive_rate,
        "total_games": $total_games,
        "timeout_rate": $timeout_rate
    },
    "configurations": {
        "standard_royale": $(extract_config_metrics "$input_file" "Standard_Royale"),
        "wrapped_standard": $(extract_config_metrics "$input_file" "Wrapped_Standard"),
        "hazard_islands": $(extract_config_metrics "$input_file" "Hazard_Islands"),
        "large_arcade": $(extract_config_metrics "$input_file" "Large_Arcade"),
        "small_standard": $(extract_config_metrics "$input_file" "Small_Standard")
    }
}
EOF
}

# Extract metrics for a specific configuration
extract_config_metrics() {
    local input_file=$1
    local config_name=$2
    
    # Find the configuration section and extract metrics
    local section=$(sed -n "/## $config_name Results/,/## /p" "$input_file" | head -n -1)
    
    local wins=$(echo "$section" | grep "Wins:" | grep -o '[0-9]*' | head -1 || echo "0")
    local win_rate=$(echo "$section" | grep "Wins:" | grep -o '([0-9.]*%)' | tr -d '()' | head -1 || echo "0%")
    local competitive_rate=$(echo "$section" | grep "Competitive Rate:" | grep -o '[0-9.]*' | head -1 || echo "0")
    local avg_turns=$(echo "$section" | grep "Average Game Length:" | grep -o '[0-9.]*' | head -1 || echo "0")
    local timeouts=$(echo "$section" | grep "Timeouts:" | grep -o '[0-9]*' | head -1 || echo "0")
    
    cat << EOF
{
    "wins": $wins,
    "win_rate": ${win_rate%\%},
    "competitive_rate": $competitive_rate,
    "average_turns": $avg_turns,
    "timeouts": $timeouts
}
EOF
}

# Generate trend analysis
generate_trend_analysis() {
    if [ ! -f "$CURRENT_RESULTS" ]; then
        echo "‚ö†Ô∏è  No current performance data available for trend analysis"
        return
    fi
    
    echo ""
    echo "## üìà Performance Trend Analysis"
    echo ""
    
    # Get current metrics
    local current_competitive=$(jq -r '.metrics.competitive_rate' "$CURRENT_RESULTS")
    local current_timeout=$(jq -r '.metrics.timeout_rate' "$CURRENT_RESULTS")
    local current_win=$(jq -r '.metrics.win_rate' "$CURRENT_RESULTS")
    
    # Performance benchmarks
    echo "### Current Performance vs Benchmarks"
    echo ""
    
    if awk "BEGIN {exit ($current_competitive >= 60.0) ? 0 : 1}"; then
        echo "üèÜ **Competitive Rate**: ${current_competitive}% (EXCELLENT - exceeds 60% target)"
    elif awk "BEGIN {exit ($current_competitive >= 40.0) ? 0 : 1}"; then
        echo "üëç **Competitive Rate**: ${current_competitive}% (GOOD - approaching 60% target)"
    else
        echo "‚ö†Ô∏è  **Competitive Rate**: ${current_competitive}% (NEEDS IMPROVEMENT - target 60%)"
    fi
    
    if awk "BEGIN {exit ($current_timeout <= 5.0) ? 0 : 1}"; then
        echo "‚úÖ **Reliability**: ${current_timeout}% timeout rate (EXCELLENT - under 5% target)"
    else
        echo "‚ùå **Reliability**: ${current_timeout}% timeout rate (NEEDS IMPROVEMENT - target <5%)"
    fi
    
    # Configuration-specific insights
    echo ""
    echo "### Configuration-Specific Performance"
    echo ""
    
    local standard_competitive=$(jq -r '.configurations.standard_royale.competitive_rate' "$CURRENT_RESULTS")
    local wrapped_competitive=$(jq -r '.configurations.wrapped_standard.competitive_rate' "$CURRENT_RESULTS")
    local hazard_competitive=$(jq -r '.configurations.hazard_islands.competitive_rate' "$CURRENT_RESULTS")
    
    echo "- **Standard Royale**: ${standard_competitive}% competitive rate"
    echo "- **Wrapped Mode**: ${wrapped_competitive}% competitive rate"
    echo "- **Hazard Islands**: ${hazard_competitive}% competitive rate"
    
    # Identify strengths and weaknesses
    echo ""
    echo "### üéØ Strategic Insights"
    echo ""
    
    if awk "BEGIN {exit ($standard_competitive > $wrapped_competitive + 10) ? 0 : 1}"; then
        echo "- üéØ **Wrapped Mode Weakness**: Performance drops significantly in wrapped mode"
        echo "  - Recommendation: Enhance edge-wrapping logic and boundary detection"
    fi
    
    if awk "BEGIN {exit ($hazard_competitive < 30.0) ? 0 : 1}"; then
        echo "- ‚ö†Ô∏è  **Hazard Handling**: Poor performance in hazardous environments"
        echo "  - Recommendation: Improve hazard avoidance and risk assessment algorithms"
    fi
    
    if awk "BEGIN {exit ($current_timeout > 2.0) ? 0 : 1}"; then
        echo "- üöÄ **Performance Optimization**: Timeouts detected"
        echo "  - Recommendation: Profile algorithms for bottlenecks, consider YJIT optimizations"
    fi
    
    # Save current results for future trend analysis
    local history_file="$RESULTS_DIR/performance_$(date +%Y%m%d_%H%M%S).json"
    cp "$CURRENT_RESULTS" "$history_file"
    
    echo "- üìä **Data Tracking**: Performance metrics saved for trend analysis"
    echo ""
}

# Main function
main() {
    local input_file=${1:-"comprehensive_results.log"}
    
    if [ ! -f "$input_file" ]; then
        echo "‚ùå Input file '$input_file' not found"
        exit 1
    fi
    
    # Extract current performance metrics
    extract_metrics "$input_file" "$CURRENT_RESULTS"
    
    # Generate trend analysis
    generate_trend_analysis
    
    echo "## üîß Technical Recommendations"
    echo ""
    echo "Based on current performance analysis:"
    echo ""
    
    local current_competitive=$(jq -r '.metrics.competitive_rate' "$CURRENT_RESULTS")
    
    if awk "BEGIN {exit ($current_competitive < 50.0) ? 0 : 1}"; then
        echo "### Priority: Strategic Algorithm Enhancement"
        echo "- Review pathfinding efficiency (A* implementation)"
        echo "- Optimize food selection criteria"
        echo "- Enhance enemy collision prediction"
        echo "- Improve space control algorithms"
        echo ""
    fi
    
    if awk "BEGIN {exit ($current_competitive >= 50.0 && $current_competitive < 70.0) ? 0 : 1}"; then
        echo "### Priority: Fine-Tuning & Edge Cases"
        echo "- Optimize decision weights and thresholds"
        echo "- Enhance endgame strategies"
        echo "- Improve performance on specific map types"
        echo "- Add opponent-specific adaptations"
        echo ""
    fi
    
    if awk "BEGIN {exit ($current_competitive >= 70.0) ? 0 : 1}"; then
        echo "### Priority: Advanced Features & Testing"
        echo "- Test against additional opponents"
        echo "- Implement advanced ML features"
        echo "- Optimize for tournament scenarios"
        echo "- Add real-time strategy adaptation"
        echo ""
    fi
    
    echo "### Monitoring & Validation"
    echo "- Continue tracking performance metrics across commits"
    echo "- Validate improvements with A/B testing"
    echo "- Monitor response time trends"
    echo "- Test edge cases and failure scenarios"
}

# Execute if called directly
if [ "${BASH_SOURCE[0]}" == "${0}" ]; then
    main "$@"
fi