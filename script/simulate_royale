#!/bin/bash
#
# Script to simulate games
# Arguments:
#   --help: show this help
#   --mode: mode to run (default: "royale")
#   --runs: number of runs (default: 1)
#   --map: map to use (default: "standard")
#   --height: height of the map (default: 10)
#   --width: width of the map (default: 10)
#   --verbose | -v: verbose mode
#
# Examples:
#   ./simulate_royale.sh --mode=royale --runs=10
#   ./simulate_royale.sh --mode=wrapped --runs=42
#   ./simulate_royale.sh --mode=wrapped --runs=42 --verbose
#   ./simulate_royale.sh --mode=wrapped --runs=42 --map=standard
#   ./simulate_royale.sh -v
#

# Parse arguments to variables
while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
        --help)
            echo "Usage: ./simulate_royale.sh [--mode=<mode>] [--runs=<runs>]"
            exit 0
            ;;
        --mode)
            mode="$2"
            shift
            ;;
        --runs)
            runs="$2"
            shift
            ;;
        --map)
            map="$2"
            shift
            ;;
        --height)
            height="$2"
            shift
            ;;
        --width)
            width="$2"
            shift
            ;;
        --verbose|-v)
            verbose=true
            ;;
        *)
            echo "Unknown argument: $key"
            exit 1
            ;;
    esac
    shift
done

# default runs to 1
runs=${runs:-1}

# default mode to "royale"
mode=${mode:-royale}

# default map to "standard"
map=${map:-standard}

# default height to 10
height=${height:-10}

# default width to 10
width=${width:-10}

# random seed
seed=$RANDOM

# if verbose mode is enabled, set verbose flag
if [[ $verbose ]]; then
    verbose_flag="-v"
fi

# Set up paths and find battlesnake CLI
export PATH=$PATH:/usr/local/go/bin:/root/go/bin
export GOPATH=/root/go

# Find battlesnake CLI
CLI_PATH=""
for path in /root/go/bin/battlesnake /usr/local/go/bin/battlesnake $(which battlesnake 2>/dev/null); do
    if [ -x "$path" ]; then
        CLI_PATH="$path"
        break
    fi
done

# If not found, try to install it
if [ -z "$CLI_PATH" ]; then
    if [[ $verbose ]]; then
        echo "Installing battlesnake CLI..."
    fi
    
    if go install github.com/BattlesnakeOfficial/rules/cli/battlesnake@latest 2>/dev/null; then
        CLI_PATH="/root/go/bin/battlesnake"
    else
        echo "Error: Unable to install battlesnake CLI"
        exit 1
    fi
fi

if [[ $verbose ]]; then
    echo "Using battlesnake CLI at: $CLI_PATH"
fi

#battlesnake play -W 11 -H 11 --name ruby-danger-noodle --url http://code-snek:4567/ --name code-snake --url http://code-snek:4568/  --name bevns --url http://code-snek:4569/ --name wilsonwong1990 --url http://code-snek:4570/ -g royale -v

# Run the simulation battlesnake play 10 times, recording who the winner was each time from the output.
# Example winner output line: "2021/10/02 05:32:05 [DONE]: Game completed after 96 turns. <winner> is the winner."

# If winner.txt exists, then delete it
if [ -f winner.txt ]; then
    rm winner.txt
fi

# test response of http://code-snek:4567/ and exit if it fails
curl -s http://code-snek:4567/ &> /dev/null
if [ $? -ne 0 ]; then
    echo "ruby-danger-noodle at code-snek:4567 is not responding"
    exit 1
fi

# test response of http://code-snek:8081/ and exit if it fails
curl -s http://code-snek:8081/ &> /dev/null
if [ $? -ne 0 ]; then
    echo "pathy snake at code-snek:8081 is not responding"
    exit 1
fi

echo ""
echo "\`\`\`"
# Output the settings
echo "Simulating battlesnake with the following settings:"
echo "  mode: $mode"
echo "  runs: $runs"
echo "  map: $map"
echo "  height: $height"
echo "  width: $width"
echo "  verbose: $verbose"
echo "  seed: $seed"
echo "\`\`\`"

echo "\`\`\`"
# Run command $runs times and record winner and turn count
for i in $(seq 1 $runs); do
    echo -n "Run [$i/$runs] "
    "$CLI_PATH" play -W $width -H $height \
    --name pathy --url http://code-snek:8081/ \
    --name ruby-danger-noodle --url http://code-snek:4567/ \
    -g $mode \
    -m $map \
    -r $seed \
    $verbose_flag --output out.log 
    
    # Extract winner and turn count using the same logic as comprehensive_simulation
    winner="error"
    turns=0
    
    if [ -f out.log ]; then
        # Parse the final result line (last line with winner info)
        final_result_line=$(tail -1 out.log)
        
        # Check if final line is the result JSON
        if echo "$final_result_line" | jq . >/dev/null 2>&1 && echo "$final_result_line" | jq -e 'has("isDraw")' >/dev/null 2>&1; then
            # Parse winner from final result
            is_draw=$(echo "$final_result_line" | jq -r '.isDraw // false')
            if [ "$is_draw" = "true" ]; then
                winner="draw"
            else
                winner=$(echo "$final_result_line" | jq -r '.winnerName // "error"')
            fi
            
            # Extract turn count from the second-to-last JSON line (last game state)
            last_game_state=$(tail -2 out.log | head -1)
            if echo "$last_game_state" | jq . >/dev/null 2>&1 && echo "$last_game_state" | jq -e 'has("turn")' >/dev/null 2>&1; then
                turns=$(echo "$last_game_state" | jq -r '.turn // 0')
                turns=$((turns + 1))
            else
                turns=$(grep -c '^{.*"turn":' out.log 2>/dev/null || echo "0")
            fi
        fi
    fi
    
    # Output result with turn count
    echo "{\"winner\": \"$winner\", \"turns\": $turns}" | tee -a winner.txt | jq -c "if .winner == \"draw\" then {winner: \"draw\", turns: .turns} else {winner: .winner, turns: .turns} end" | sed 's/[{}"]//g' | sed 's/:/: /g' | sed 's/,/ /g'
done
echo "\`\`\`"

echo "\`\`\`"
# Output the most winning player with turn statistics from the file.
echo "=== Game Results Summary ==="
cat winner.txt | jq -r '.winner' | sort | uniq -c | sort -nr

echo ""
echo "=== Turn Count Analysis ==="
echo "Average turns per game:"
cat winner.txt | jq -r '.turns' | awk '{sum+=$1; count++} END {if(count>0) printf "%.1f turns (over %d games)\n", sum/count, count; else print "No valid games"}'

echo ""
echo "Turn distribution:"
cat winner.txt | jq -r '.turns' | sort -n | uniq -c | sort -nr | head -5

rm winner.txt
echo "\`\`\`"
