name: "Deploy"

# The workflow to execute on is comments that are newly created
on:
  issue_comment:
    types: [created]

# Permissions needed for reacting and adding comments for IssueOps commands
permissions:
  pull-requests: write
  deployments: write
  contents: write
  id-token: write
  packages: write

jobs:
  deployment:
    if: ${{ github.event.issue.pull_request }} # only run on pull request comments
    runs-on: ubuntu-latest
    environment: production-secrets
    steps:
      # Execute IssueOps branch deployment logic, hooray!
      # This will be used to "gate" all future steps below and conditionally trigger steps/deployments
      - uses: github/branch-deploy@v3.0.3
        id: branch-deploy
        with:
          trigger: ".deploy"

      # Checkout repository based on the ref provided by the branch-deploy step
      - uses: actions/checkout@v3
        with:
          ref: ${{ steps.branch-deploy.outputs.ref }}
          fetch-depth: 0
      
      # use github cli to get changed files on current branch
      - name: Get files changing in the Pull Request
        if: ${{ steps.branch-deploy.outputs.continue == 'true' }}
        id: changed-files-on-pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr diff --name-only > changed-files.txt
      
      # check if changed files require a full deployment
      - name: Check changed files
        if: ${{ steps.branch-deploy.outputs.continue == 'true' }}
        id: check-file
        run: |
          for file in $(cat changed-files.txt); do
            if [[ $file != "README.md" ]]; then
              echo "Full Production Deployment Required"
              echo "::set-output name=full-deploy::true"
              break
            fi
          done

      # NOOP deployment logic
      - name: noop deploy
        if: ${{ steps.branch-deploy.outputs.continue == 'true' && steps.branch-deploy.outputs.noop == 'true' }}
        run: |
          echo "We do not currently have a noop deploy configured. A proper noop deploy may be added in the future."
          echo "DEPLOY_MESSAGE=We do not currently have a noop deploy configured. A proper noop deploy may be added in the future." >> $GITHUB_ENV

      # NOOP Message if a full deployment is required     
      - name: Check if full deployment is required
        if: ${{ steps.branch-deploy.outputs.continue == 'true' && steps.branch-deploy.outputs.noop == 'true' && steps.check-file.outputs.full-deploy == 'true' }}
        run: |
          echo "Full Deployment Required"
          echo "DEPLOY_MESSAGE=Full Deployment Required." >> $GITHUB_ENV

      # NOOP Message if a full deployment is not required
      - name: Check if full deployment is not required
        if: ${{ steps.branch-deploy.outputs.continue == 'true' && steps.branch-deploy.outputs.noop == 'true' && steps.check-file.outputs.full-deploy != 'true' }}
        run: |
          echo "Full Deployment NOT Required"
          echo "DEPLOY_MESSAGE=Full Deployment NOT Required." >> $GITHUB_ENV
          
      # Production deploy logic
      - name: production deploy
        if: ${{ steps.branch-deploy.outputs.continue == 'true' && steps.branch-deploy.outputs.noop != 'true' }}
        run: echo "I am doing a production deploy"

      - name: Build the Docker image
        if: ${{ steps.branch-deploy.outputs.continue == 'true' && steps.branch-deploy.outputs.noop != 'true' && steps.check-file.outputs.full-deploy == 'true' }}
        run: docker build . --file Dockerfile --tag ghcr.io/es-na-battlesnake/code-snake:${{ github.sha }} --tag ghcr.io/es-na-battlesnake/code-snake:last-deploy

      - name: Login to GitHub Container Registry
        if: ${{ steps.branch-deploy.outputs.continue == 'true' && steps.branch-deploy.outputs.noop != 'true' && steps.check-file.outputs.full-deploy == 'true' }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker image
        if: ${{ steps.branch-deploy.outputs.continue == 'true' && steps.branch-deploy.outputs.noop != 'true' && steps.check-file.outputs.full-deploy == 'true' }}
        run: docker push --all-tags ghcr.io/es-na-battlesnake/code-snake
      
      - name: 'Login via Azure CLI'
        if: ${{ steps.branch-deploy.outputs.continue == 'true' && steps.branch-deploy.outputs.noop != 'true' && steps.check-file.outputs.full-deploy == 'true' }}
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }} 
          enable-AzPSSession: true

      - name: Delete existing deployment if deployment workflow changes or delete is true
        if: ${{ steps.branch-deploy.outputs.continue == 'true' && steps.branch-deploy.outputs.noop != 'true' && steps.check-file.outputs.full-deploy == 'true' }}
        run: |
          az container list | grep code-snake || echo "No deployment found" && exit 0
          # if ${{ github.event.inputs.delete }} = true then 
          if [ "${{ github.event.inputs.delete }}" = "true" ]; then
            echo "Deleting existing deployment due to true flag"
            az container list | grep code-snake && az container delete --yes --name code-snake --ids "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/snekResourceGroup/providers/Microsoft.ContainerInstance/containerGroups/code-snake"
            exit 0
          fi
          # File based detection
          for file in $(cat changed-files.txt); do
            if [[ $file == ".github/workflows/docker-image.yml" ]]; then
              az container list | grep code-snake && az container delete --yes --name code-snake --ids "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/snekResourceGroup/providers/Microsoft.ContainerInstance/containerGroups/code-snake"
            fi
          done
      
      - name: 'Deploy to Azure Container Instances'
        if: ${{ steps.branch-deploy.outputs.continue == 'true' && steps.branch-deploy.outputs.noop != 'true' && steps.check-file.outputs.full-deploy == 'true' }}
        uses: 'azure/aci-deploy@v1'
        with:
          resource-group: snekResourceGroup
          dns-name-label: code-snek
          image: ghcr.io/es-na-battlesnake/code-snake:${{ github.sha }}
          name: code-snake
          location: 'west us 3'
          ports: '4567 4568 4569 4570 4571 8080 8081'
          restart-policy: OnFailure
          ip-address: Public
