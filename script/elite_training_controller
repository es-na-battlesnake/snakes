#!/bin/bash
#
# Master Training Controller for Elite Battlesnake Performance
#
# This script orchestrates comprehensive training cycles designed to achieve
# and maintain 90%+ win rates through iterative improvement and validation.

set -e

# Configuration
TRAINING_GOAL=90
MAX_TRAINING_CYCLES=10
GAMES_PER_CYCLE=50
VALIDATION_GAMES=100

# Colors
GREEN='\033[0;32m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
YELLOW='\033[1;33m'
NC='\033[0m'

log_info() { echo -e "${BLUE}üéØ [TRAINING] $1${NC}"; }
log_success() { echo -e "${GREEN}‚úÖ [SUCCESS] $1${NC}"; }
log_training() { echo -e "${PURPLE}üß† [ELITE] $1${NC}"; }
log_warning() { echo -e "${YELLOW}‚ö†Ô∏è  [WARNING] $1${NC}"; }

# Master training execution
execute_elite_training() {
    log_training "=== ELITE BATTLESNAKE TRAINING PROGRAM ==="
    log_training "Target: ${TRAINING_GOAL}% competitive rate"
    log_training "Strategy: Iterative improvement with advanced analytics"
    echo ""
    
    # Phase 1: Baseline assessment
    log_info "Phase 1: Baseline Assessment"
    baseline_result=$(script/advanced_simulation_training 1 30)
    log_success "Baseline assessment complete"
    echo ""
    
    # Phase 2: Iterative training cycles
    log_info "Phase 2: Advanced Training Cycles"
    best_performance=0
    cycles_without_improvement=0
    
    for cycle in $(seq 1 $MAX_TRAINING_CYCLES); do
        log_training "=== Training Cycle $cycle/$MAX_TRAINING_CYCLES ==="
        
        # Run training cycle
        cycle_result=$(script/advanced_simulation_training 1 $GAMES_PER_CYCLE)
        
        # Extract performance (last number from the training output)
        performance=$(echo "$cycle_result" | grep -o '[0-9]\+\.[0-9]\+' | tail -1)
        
        if [ -n "$performance" ]; then
            log_info "Cycle $cycle performance: ${performance}%"
            
            # Check for improvement
            if (( $(echo "$performance > $best_performance" | bc -l) )); then
                best_performance=$performance
                cycles_without_improvement=0
                log_success "New best performance: ${best_performance}%"
                
                # Check if we've reached the goal
                if (( $(echo "$performance >= $TRAINING_GOAL" | bc -l) )); then
                    log_success "üéâ TARGET ACHIEVED! ${performance}% competitive rate"
                    
                    # Run validation
                    log_info "Running validation with $VALIDATION_GAMES games..."
                    validation_result=$(script/advanced_simulation_training 1 $VALIDATION_GAMES)
                    validation_performance=$(echo "$validation_result" | grep -o '[0-9]\+\.[0-9]\+' | tail -1)
                    
                    if (( $(echo "$validation_performance >= $TRAINING_GOAL" | bc -l) )); then
                        log_success "üèÜ VALIDATED! Elite performance confirmed: ${validation_performance}%"
                        break
                    else
                        log_warning "Validation failed: ${validation_performance}% < ${TRAINING_GOAL}%"
                        log_info "Continuing training to improve consistency..."
                    fi
                fi
            else
                cycles_without_improvement=$((cycles_without_improvement + 1))
                log_warning "No improvement in cycle $cycle (${cycles_without_improvement} consecutive)"
                
                # Early stopping if no improvement for several cycles
                if [ $cycles_without_improvement -ge 3 ]; then
                    log_warning "No improvement for 3 cycles - analyzing for strategic changes..."
                    
                    # Run deep analysis
                    log_info "Performing deep performance analysis..."
                    python3 script/elite_performance_analyzer.py --data-dir /tmp/battlesnake_training_data
                    
                    # Continue training but with awareness of plateau
                    log_info "Continuing training with enhanced focus on weak areas..."
                fi
            fi
        else
            log_warning "Could not extract performance from cycle $cycle"
        fi
        
        echo ""
    done
    
    # Phase 3: Final analysis and recommendations
    log_info "Phase 3: Final Analysis and Recommendations"
    
    log_success "Training Program Complete!"
    log_success "Best Performance Achieved: ${best_performance}%"
    
    if (( $(echo "$best_performance >= $TRAINING_GOAL" | bc -l) )); then
        log_success "üéâ ELITE PERFORMANCE ACHIEVED!"
        log_success "Ruby snake is now tournament-ready at ${best_performance}% competitive rate"
    elif (( $(echo "$best_performance >= 75" | bc -l) )); then
        log_success "üéØ EXCELLENT PERFORMANCE: ${best_performance}%"
        log_info "Continue training to reach elite 90% goal"
    elif (( $(echo "$best_performance >= 60" | bc -l) )); then
        log_success "üëç GOOD PERFORMANCE: ${best_performance}%"
        log_info "Focus on strategic improvements for excellent performance"
    else
        log_warning "‚ö†Ô∏è PERFORMANCE NEEDS IMPROVEMENT: ${best_performance}%"
        log_info "Review recommendations from performance analyzer"
    fi
    
    # Generate final comprehensive analysis
    log_info "Generating comprehensive performance analysis..."
    python3 script/elite_performance_analyzer.py --data-dir /tmp/battlesnake_training_data --output "ELITE_TRAINING_REPORT.md"
    
    echo ""
    echo "üéØ Elite Training Summary:"
    echo "  Target: ${TRAINING_GOAL}% competitive rate"
    echo "  Achieved: ${best_performance}% competitive rate" 
    echo "  Status: $([ $(echo "$best_performance >= $TRAINING_GOAL" | bc -l) -eq 1 ] && echo "‚úÖ GOAL ACHIEVED" || echo "‚è≥ CONTINUE TRAINING")"
    echo "  Report: ELITE_TRAINING_REPORT.md"
    echo ""
}

# Main execution
main() {
    echo "üöÄ Elite Battlesnake Training System"
    echo "===================================="
    echo ""
    
    # Verify environment
    log_info "Verifying training environment..."
    
    # Check required scripts
    if [ ! -f "script/advanced_simulation_training" ]; then
        echo "‚ùå Missing advanced_simulation_training script"
        exit 1
    fi
    
    if [ ! -f "script/elite_performance_analyzer.py" ]; then
        echo "‚ùå Missing elite_performance_analyzer.py script"
        exit 1
    fi
    
    # Check Python dependencies
    if ! command -v python3 >/dev/null; then
        log_warning "Python3 not found - installing..."
        apt-get update -qq && apt-get install -y -qq python3
    fi
    
    # Check bc for calculations
    if ! command -v bc >/dev/null; then
        log_warning "bc not found - installing..."
        apt-get update -qq && apt-get install -y -qq bc
    fi
    
    log_success "Environment verified"
    echo ""
    
    # Execute training
    execute_elite_training
}

# Run main function
main "$@"