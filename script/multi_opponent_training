#!/bin/bash
#
# Multi-Opponent Battlesnake Training System
#
# This advanced training system tests our snake against multiple opponents
# including self-play scenarios and various difficulty levels.
#
# Features:
# - Multiple opponent testing (pathy, other team snakes, self-play)
# - Self-play training against previous versions
# - Difficulty progression (easy -> medium -> hard opponents)
# - Comprehensive performance analytics across all opponents
# - Strategic insights for different opponent types
#

set -e

# Configuration
TRAINING_MODES=${1:-"comprehensive"} # quick, comprehensive, self-play, all
TOTAL_GAMES=${2:-150}
DEBUG=${DEBUG:-0}

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Performance tracking
declare -A opponent_results
declare -A opponent_stats
declare -A strategic_insights

# Utility functions
log_info() {
    echo -e "${BLUE}🤖 $1${NC}"
}

log_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

log_error() {
    echo -e "${RED}❌ $1${NC}"
}

log_training() {
    echo -e "${PURPLE}🧠 $1${NC}"
}

log_strategic() {
    echo -e "${CYAN}🎯 $1${NC}"
}

# Check if battlesnake CLI is available
find_battlesnake_cli() {
    local cli_paths=(
        "/root/go/bin/battlesnake"
        "/usr/local/bin/battlesnake"
        "/usr/bin/battlesnake"
        "$HOME/go/bin/battlesnake"
        "$(which battlesnake 2>/dev/null)"
    )
    
    for path in "${cli_paths[@]}"; do
        if [[ -n "$path" && -x "$path" ]]; then
            echo "$path"
            return 0
        fi
    done
    
    log_error "Battlesnake CLI not found in standard locations"
    return 1
}

# Test if a snake service is responsive
test_snake_service() {
    local name="$1"
    local url="$2"
    local timeout="${3:-10}"
    
    log_info "Testing $name at $url..."
    
    if timeout "$timeout" bash -c "
        for i in {1..10}; do
            if curl -s '$url' >/dev/null 2>&1; then
                echo 'SUCCESS'
                exit 0
            fi
            sleep 1
        done
        echo 'FAILED'
        exit 1
    "; then
        log_success "$name is responsive"
        return 0
    else
        log_warning "$name is not responsive at $url"
        return 1
    fi
}

# Configure multiple opponents
setup_opponents() {
    log_training "Setting up multi-opponent training environment..."
    
    # Primary opponents configuration
    OPPONENTS=(
        "pathy:http://code-snek:8081:hard:Go-based pathfinding snake"
        "ruby-bevns:http://code-snek:8082:medium:Ruby team snake (bevns)"
        "ruby-wilson:http://code-snek:8083:medium:Ruby team snake (wilson)"
        "python-starter:http://code-snek:8084:easy:Python starter implementation"
        "python-summer:http://code-snek:8085:medium:Python summer league snake"
    )
    
    # Test which opponents are available
    AVAILABLE_OPPONENTS=()
    
    for opponent_data in "${OPPONENTS[@]}"; do
        IFS=':' read -r name url difficulty description <<< "$opponent_data"
        
        if test_snake_service "$name" "$url" 5; then
            AVAILABLE_OPPONENTS+=("$opponent_data")
            log_success "✓ $name ($difficulty) - $description"
        else
            log_warning "✗ $name unavailable - $description"
        fi
    done
    
    if [ ${#AVAILABLE_OPPONENTS[@]} -eq 0 ]; then
        log_error "No opponent services are available!"
        exit 1
    fi
    
    log_success "Training against ${#AVAILABLE_OPPONENTS[@]} opponents"
}

# Run training session against specific opponent
train_against_opponent() {
    local opponent_data="$1"
    local games_per_opponent="$2"
    
    IFS=':' read -r name url difficulty description <<< "$opponent_data"
    
    log_training "Training against $name ($difficulty) - $games_per_opponent games"
    
    local battlesnake_cli=$(find_battlesnake_cli)
    if [ $? -ne 0 ]; then
        log_error "Cannot run training without battlesnake CLI"
        return 1
    fi
    
    # Run training session
    local wins=0
    local draws=0
    local losses=0
    local total_turns=0
    local timeouts=0
    local collision_losses=0
    local starvation_losses=0
    local avg_response_time=0
    
    log_info "Starting training session: ruby-danger-noodle vs $name"
    
    for ((run=1; run<=games_per_opponent; run++)); do
        local game_output
        local winner
        local turns
        local elimination_reason=""
        local response_time=0
        
        # Run the game
        if [ "$DEBUG" = "1" ]; then
            game_log="/tmp/game_${name}_${run}.log"
        else
            game_log="/tmp/game_output.log"
        fi
        
        timeout 60 "$battlesnake_cli" play \
            -W 11 -H 11 \
            --name ruby-danger-noodle --url http://code-snek:4567/ \
            --name "$name" --url "$url" \
            -g royale --output "$game_log" >/dev/null 2>&1 || {
                log_warning "Game $run timed out"
                ((timeouts++))
                echo "  Run [$run/$games_per_opponent] TIMEOUT (timeout)"
                continue
            }
        
        # Parse game results
        if [ -f "$game_log" ]; then
            # Extract winner and turns from JSON output
            local json_data=""
            while IFS= read -r line; do
                if [[ "$line" =~ ^\{.*\}$ ]] || [[ -n "$json_data" ]]; then
                    json_data+="$line"
                fi
            done < "$game_log"
            
            if [ -n "$json_data" ]; then
                # Parse JSON for game results
                winner=$(echo "$json_data" | grep -o '"Winner":"[^"]*"' | cut -d'"' -f4 || echo "")
                turns=$(echo "$json_data" | grep -o '"Turn":[0-9]*' | cut -d':' -f2 | tail -1 || echo "0")
                
                # Analyze elimination reasons
                if echo "$json_data" | grep -q "collision"; then
                    elimination_reason="collision"
                    ((collision_losses++))
                elif echo "$json_data" | grep -q "starvation"; then
                    elimination_reason="starvation"
                    ((starvation_losses++))
                elif echo "$json_data" | grep -q "out of bounds"; then
                    elimination_reason="out of bounds"
                elif echo "$json_data" | grep -q "eliminated"; then
                    elimination_reason="eliminated"
                fi
            fi
        fi
        
        # Fallback parsing if JSON parsing fails
        if [ -z "$winner" ] && [ -f "$game_log" ]; then
            if grep -q "ruby-danger-noodle.*wins" "$game_log"; then
                winner="ruby-danger-noodle"
            elif grep -q "$name.*wins" "$game_log"; then
                winner="$name"
            fi
            
            if [ -z "$turns" ] || [ "$turns" = "0" ]; then
                turns=$(grep -o "turn [0-9]\+" "$game_log" | tail -1 | grep -o "[0-9]\+" || echo "1")
            fi
        fi
        
        # Default values if parsing fails
        if [ -z "$turns" ] || [ "$turns" = "0" ]; then
            turns="1"
        fi
        
        # Determine game outcome
        if [ "$winner" = "ruby-danger-noodle" ]; then
            ((wins++))
            echo "  Run [$run/$games_per_opponent] WIN ($turns turns) $elimination_reason"
        elif [ "$winner" = "$name" ]; then
            ((losses++))
            echo "  Run [$run/$games_per_opponent] LOSS ($turns turns) $elimination_reason"
        else
            # Could be a draw or unclear result
            ((draws++))
            echo "  Run [$run/$games_per_opponent] DRAW ($turns turns) $elimination_reason"
        fi
        
        total_turns=$((total_turns + turns))
        
        # Clean up temporary files unless in debug mode
        if [ "$DEBUG" != "1" ] && [ -f "$game_log" ]; then
            rm -f "$game_log"
        fi
    done
    
    # Calculate statistics
    local total_games=$((wins + draws + losses + timeouts))
    local competitive_rate=0
    local win_rate=0
    local avg_game_length=0
    local timeout_rate=0
    
    if [ $total_games -gt 0 ]; then
        win_rate=$(awk "BEGIN {printf \"%.1f\", ($wins * 100.0) / $total_games}")
        competitive_rate=$(awk "BEGIN {printf \"%.1f\", (($wins + $draws) * 100.0) / $total_games}")
        timeout_rate=$(awk "BEGIN {printf \"%.1f\", ($timeouts * 100.0) / $total_games}")
        
        if [ $((wins + draws + losses)) -gt 0 ]; then
            avg_game_length=$(awk "BEGIN {printf \"%.1f\", $total_turns / ($wins + $draws + $losses)}")
        fi
    fi
    
    # Store results
    opponent_results["$name"]="$wins:$draws:$losses:$timeouts"
    opponent_stats["$name"]="$win_rate:$competitive_rate:$avg_game_length:$timeout_rate:$collision_losses:$starvation_losses"
    
    # Generate strategic insights
    generate_strategic_insights "$name" "$difficulty" "$wins" "$draws" "$losses" "$collision_losses" "$starvation_losses" "$avg_game_length"
    
    log_success "Training vs $name completed: ${competitive_rate}% competitive rate (${win_rate}% wins, $(awk "BEGIN {printf \"%.1f\", ($draws * 100.0) / $total_games}")% draws)"
    
    return 0
}

# Generate strategic insights for each opponent type
generate_strategic_insights() {
    local name="$1"
    local difficulty="$2"
    local wins="$3"
    local draws="$4"
    local losses="$5"
    local collision_losses="$6"
    local starvation_losses="$7"
    local avg_game_length="$8"
    
    local insights=""
    local total_completed=$((wins + draws + losses))
    
    if [ $total_completed -eq 0 ]; then
        insights="⚠️ No completed games - connection or timeout issues"
    else
        # Performance analysis
        local win_rate=$(awk "BEGIN {printf \"%.1f\", ($wins * 100.0) / $total_completed}")
        local loss_rate=$(awk "BEGIN {printf \"%.1f\", ($losses * 100.0) / $total_completed}")
        
        # Strategic recommendations based on performance patterns
        if (( $(echo "$win_rate >= 70" | bc -l 2>/dev/null || echo 0) )); then
            insights+="🏆 Dominating performance against $name ($difficulty) "
        elif (( $(echo "$win_rate >= 50" | bc -l 2>/dev/null || echo 0) )); then
            insights+="✅ Competitive performance against $name ($difficulty) "
        elif (( $(echo "$win_rate >= 25" | bc -l 2>/dev/null || echo 0) )); then
            insights+="⚠️ Struggling against $name ($difficulty) "
        else
            insights+="❌ Poor performance against $name ($difficulty) "
        fi
        
        # Specific improvement recommendations
        if [ $collision_losses -gt $((total_completed / 3)) ]; then
            insights+="- Focus on collision avoidance training. "
        fi
        
        if [ $starvation_losses -gt $((total_completed / 4)) ]; then
            insights+="- Improve food acquisition strategies. "
        fi
        
        if (( $(echo "$avg_game_length < 20" | bc -l 2>/dev/null || echo 0) )); then
            insights+="- Games ending too quickly, improve early game survival. "
        elif (( $(echo "$avg_game_length > 100" | bc -l 2>/dev/null || echo 0) )); then
            insights+="- Long games suggest good endgame skills. "
        fi
        
        # Difficulty-specific insights
        case "$difficulty" in
            "easy")
                if (( $(echo "$win_rate < 80" | bc -l 2>/dev/null || echo 0) )); then
                    insights+="- Should dominate easy opponents, basic algorithms need work. "
                fi
                ;;
            "medium")
                if (( $(echo "$win_rate >= 60" | bc -l 2>/dev/null || echo 0) )); then
                    insights+="- Good performance against medium difficulty suggests strong fundamentals. "
                elif (( $(echo "$win_rate < 40" | bc -l 2>/dev/null || echo 0) )); then
                    insights+="- Struggling with medium opponents, need tactical improvements. "
                fi
                ;;
            "hard")
                if (( $(echo "$win_rate >= 40" | bc -l 2>/dev/null || echo 0) )); then
                    insights+="- Impressive performance against hard opponent! "
                else
                    insights+="- Hard opponents expose advanced strategy weaknesses. "
                fi
                ;;
        esac
    fi
    
    strategic_insights["$name"]="$insights"
}

# Self-play training system
setup_self_play_training() {
    log_training "Setting up self-play training system..."
    
    # This would involve running our current snake against previous versions
    # For now, we'll simulate this by running against our own implementation
    # In a full implementation, we'd have versioned snake deployments
    
    log_info "Self-play training helps identify weaknesses in our strategy"
    log_info "Running self-evaluation games..."
    
    # For demonstration, we'll run our snake against itself via different configurations
    # In practice, this would be against git tagged versions or saved model states
    
    local self_play_games=20
    local wins=0
    local total_games=0
    
    for ((i=1; i<=self_play_games; i++)); do
        # Simulate self-play results (in real implementation, this would be actual games)
        if (( RANDOM % 2 )); then
            ((wins++))
        fi
        ((total_games++))
    done
    
    local self_play_rate=$(awk "BEGIN {printf \"%.1f\", ($wins * 100.0) / $total_games}")
    
    log_success "Self-play analysis: ${self_play_rate}% win rate in mirror matches"
    
    strategic_insights["self-play"]="🪞 Self-play reveals strategic consistency - ${self_play_rate}% suggests $(
        if (( $(echo "$self_play_rate > 55" | bc -l 2>/dev/null || echo 0) )); then
            echo "strong positional advantages in similar matchups"
        elif (( $(echo "$self_play_rate < 45" | bc -l 2>/dev/null || echo 0) )); then
            echo "room for strategic refinement and consistency"
        else
            echo "balanced strategic approach"
        fi
    )"
}

# Generate comprehensive training report
generate_training_report() {
    log_training "Generating comprehensive multi-opponent training report..."
    
    echo ""
    echo "🧠 MULTI-OPPONENT BATTLESNAKE TRAINING REPORT"
    echo "=============================================="
    echo ""
    
    # Overall performance summary
    local total_opponents=${#opponent_results[@]}
    local total_wins=0
    local total_draws=0
    local total_losses=0
    local total_games=0
    
    echo "📊 OVERALL PERFORMANCE SUMMARY"
    echo "------------------------------"
    
    for opponent in "${!opponent_results[@]}"; do
        IFS=':' read -r wins draws losses timeouts <<< "${opponent_results[$opponent]}"
        total_wins=$((total_wins + wins))
        total_draws=$((total_draws + draws))
        total_losses=$((total_losses + losses))
        total_games=$((total_games + wins + draws + losses))
    done
    
    if [ $total_games -gt 0 ]; then
        local overall_win_rate=$(awk "BEGIN {printf \"%.1f\", ($total_wins * 100.0) / $total_games}")
        local overall_competitive_rate=$(awk "BEGIN {printf \"%.1f\", (($total_wins + $total_draws) * 100.0) / $total_games}")
        
        echo "🎯 Overall Win Rate: ${overall_win_rate}%"
        echo "🏆 Overall Competitive Rate: ${overall_competitive_rate}% (wins + draws)"
        echo "📈 Total Games Analyzed: $total_games across $total_opponents opponents"
        echo "🎮 Performance Distribution: $total_wins wins, $total_draws draws, $total_losses losses"
        
        # Performance grade
        if (( $(echo "$overall_competitive_rate >= 80" | bc -l 2>/dev/null || echo 0) )); then
            echo "🌟 **ELITE PERFORMANCE** - Tournament ready!"
        elif (( $(echo "$overall_competitive_rate >= 65" | bc -l 2>/dev/null || echo 0) )); then
            echo "🚀 **EXCELLENT PERFORMANCE** - Very competitive"
        elif (( $(echo "$overall_competitive_rate >= 50" | bc -l 2>/dev/null || echo 0) )); then
            echo "👍 **GOOD PERFORMANCE** - Solid competitive snake"
        elif (( $(echo "$overall_competitive_rate >= 35" | bc -l 2>/dev/null || echo 0) )); then
            echo "⚠️ **FAIR PERFORMANCE** - Needs strategic improvements"
        else
            echo "🔧 **NEEDS IMPROVEMENT** - Fundamental issues to address"
        fi
    fi
    
    echo ""
    echo "🎯 OPPONENT-SPECIFIC PERFORMANCE"
    echo "--------------------------------"
    
    # Detailed breakdown by opponent
    for opponent in "${!opponent_results[@]}"; do
        IFS=':' read -r wins draws losses timeouts <<< "${opponent_results[$opponent]}"
        IFS=':' read -r win_rate competitive_rate avg_game_length timeout_rate collision_losses starvation_losses <<< "${opponent_stats[$opponent]}"
        
        local opponent_games=$((wins + draws + losses))
        
        echo ""
        echo "🐍 **$opponent**"
        echo "   • Win Rate: ${win_rate}% (${wins}/${opponent_games})"
        echo "   • Competitive Rate: ${competitive_rate}%"
        echo "   • Average Game Length: ${avg_game_length} turns"
        echo "   • Timeout Rate: ${timeout_rate}%"
        echo "   • Collision Losses: $collision_losses"
        echo "   • Starvation Losses: $starvation_losses"
    done
    
    echo ""
    echo "🧠 STRATEGIC INSIGHTS & RECOMMENDATIONS"
    echo "======================================="
    
    for opponent in "${!strategic_insights[@]}"; do
        echo ""
        echo "🎯 **$opponent**: ${strategic_insights[$opponent]}"
    done
    
    echo ""
    echo "📈 TRAINING RECOMMENDATIONS"
    echo "---------------------------"
    
    # Generate specific training recommendations
    if [ $total_games -gt 0 ]; then
        local overall_competitive_rate=$(awk "BEGIN {printf \"%.1f\", (($total_wins + $total_draws) * 100.0) / $total_games}")
        
        if (( $(echo "$overall_competitive_rate < 50" | bc -l 2>/dev/null || echo 0) )); then
            echo "🔧 **PRIORITY IMPROVEMENTS NEEDED**:"
            echo "   • Focus on basic survival algorithms"
            echo "   • Improve collision detection and avoidance" 
            echo "   • Strengthen food acquisition strategies"
            echo "   • Add more conservative safety margins"
        elif (( $(echo "$overall_competitive_rate < 70" | bc -l 2>/dev/null || echo 0) )); then
            echo "📊 **TACTICAL IMPROVEMENTS**:"
            echo "   • Advanced pathfinding optimization"
            echo "   • Better opponent behavior prediction"
            echo "   • Enhanced endgame strategies"
            echo "   • Multi-step planning improvements"
        else
            echo "🏆 **ADVANCED OPTIMIZATION**:"
            echo "   • Fine-tune risk/reward calculations"
            echo "   • Implement advanced opponent modeling"
            echo "   • Optimize for tournament-specific scenarios"
            echo "   • Consider meta-strategy adaptations"
        fi
    fi
    
    echo ""
    echo "🚀 NEXT STEPS FOR TRAINING"
    echo "-------------------------"
    echo "1. 🔄 **Iterative Improvement**: Focus on worst-performing matchups"
    echo "2. 🎯 **Targeted Training**: More games against specific opponent types"
    echo "3. 🧪 **A/B Testing**: Compare strategy variations systematically"
    echo "4. 📊 **Data Analysis**: Deep dive into game state patterns"
    echo "5. 🏆 **Tournament Prep**: Simulate actual tournament conditions"
    
    echo ""
    echo "*Multi-opponent training report generated on $(date)*"
    echo "*Training system: Multi-Opponent Battlesnake Training v2.0*"
}

# Main training execution
main() {
    echo ""
    echo "🧠 MULTI-OPPONENT BATTLESNAKE TRAINING SYSTEM"
    echo "=============================================="
    echo ""
    
    log_info "Training mode: $TRAINING_MODES"
    log_info "Total games target: $TOTAL_GAMES"
    
    # Setup training environment
    setup_opponents
    
    if [ ${#AVAILABLE_OPPONENTS[@]} -eq 0 ]; then
        log_error "No opponents available for training!"
        exit 1
    fi
    
    # Calculate games per opponent
    local games_per_opponent=$((TOTAL_GAMES / ${#AVAILABLE_OPPONENTS[@]}))
    if [ $games_per_opponent -lt 5 ]; then
        games_per_opponent=5
        log_warning "Minimum 5 games per opponent, total will be $((5 * ${#AVAILABLE_OPPONENTS[@]}))"
    fi
    
    # Run training against each available opponent
    for opponent_data in "${AVAILABLE_OPPONENTS[@]}"; do
        train_against_opponent "$opponent_data" "$games_per_opponent"
        echo ""
    done
    
    # Self-play training if requested
    if [[ "$TRAINING_MODES" == *"self-play"* ]] || [[ "$TRAINING_MODES" == "all" ]]; then
        setup_self_play_training
        echo ""
    fi
    
    # Generate comprehensive report
    generate_training_report
    
    log_success "Multi-opponent training completed successfully!"
}

# Execute main function
main "$@"