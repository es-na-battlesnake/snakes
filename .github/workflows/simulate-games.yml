name: Comprehensive Snake Performance Testing

on:
  push:
    branches-ignore:
      - main
    paths:
      - 'snakes/**'
      - '.github/workflows/simulate-games.yml'
      - 'script/simulate_royale'
      - 'script/comprehensive_simulation'
      
  # trigger action on new pull request pushes
  pull_request:
    branches:
      - main
    paths:
      - 'snakes/**'
      - '.github/workflows/simulate-games.yml'
      - '.github/workflows/build-base.yml'
      - 'script/simulate_royale'
      - 'script/comprehensive_simulation'
      - 'Dockerfile*'

jobs:

  comprehensive-performance-testing:

    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '^1.17.1'

      - name: Build the Docker image
        run: docker build . --file Dockerfile --tag code-snek:pr
      - name: Setup Docker network
        run: docker network create test
      - name: Run the Docker image
        run: >
          docker run -d -p 4567:4567 -p 8081:8081 --network test 
          --name code-snek code-snek:pr

      - name: Wait for services to be ready
        run: |
          echo "Waiting for snake services to initialize..."
          sleep 15

          # Check Ruby snake health
          timeout 30 bash -c 'until curl -s http://localhost:4567/ > /dev/null; do sleep 1; done'
          echo "‚úÖ Ruby snake is ready"

          # Check pathy snake health
          timeout 30 bash -c 'until curl -s http://localhost:8081/ > /dev/null; do sleep 1; done'
          echo "‚úÖ Pathy snake is ready"

      - name: Validate simulation infrastructure
        id: validate-infrastructure
        run: |
          echo "üß™ Validating simulation infrastructure..."
          docker run --rm --network test code-snek:pr script/validate_simulation

      - name: Run advanced elite training system
        id: elite-training
        run: |
          echo "üß† Starting Elite Battlesnake Training System..."
          docker run --rm --network test -e DEBUG=1 code-snek:pr script/advanced_simulation_training 2 25 | tee -a elite_training_results.log

      - name: Generate elite performance analysis
        id: elite-analysis
        run: |
          echo "üìä Generating elite performance analysis..."
          docker run --rm --network test -v $(pwd):/workspace -w /workspace code-snek:pr python3 script/elite_performance_analyzer.py --data-dir /tmp/battlesnake_training_data --output elite_analysis_report.md | tee -a elite_analysis.log

      - name: Generate elite performance summary
        id: elite-summary
        run: |
          echo "üìä Generating elite performance metrics..."

          # Extract key metrics from the elite training results
          WIN_RATE=$(grep -o '[0-9.]*% win rate' elite_training_results.log | tail -1 | grep -o '[0-9.]*' || echo "0")
          if [ -z "$WIN_RATE" ]; then
            WIN_RATE=$(grep -E 'wins.*[0-9]+.*\(' elite_training_results.log | tail -1 | grep -o '[0-9.]*%' | head -1 | grep -o '[0-9.]*' || echo "0")
          fi
          
          COMPETITIVE_RATE=$(grep -o '[0-9.]*% competitive rate' elite_training_results.log | tail -1 | grep -o '[0-9.]*' || echo "0")
          if [ -z "$COMPETITIVE_RATE" ]; then
            COMPETITIVE_RATE=$(grep -E 'Competitive rate.*[0-9.]*%' elite_training_results.log | tail -1 | grep -o '[0-9.]*%' | head -1 | grep -o '[0-9.]*' || echo "0")
          fi
          
          TOTAL_GAMES=$(grep -E 'total.*games|[0-9]+ games' elite_training_results.log | grep -o '[0-9]\+' | tail -1 || echo "0")
          TIMEOUT_RATE=$(grep -i "timeout" elite_training_results.log | grep -o '[0-9.]*%' | tail -1 || echo "0%")
          
          # Check for performance grade markers
          ELITE_GRADE=$(grep -E "Performance.*Grade|ELITE|EXCELLENT|GOOD|FAIR|NEEDS" elite_training_results.log | tail -1 || echo "UNKNOWN")

          # Create elite performance badge
          if (( $(echo "$COMPETITIVE_RATE >= 90" | bc -l 2>/dev/null || echo 0) )); then
            PERFORMANCE_BADGE="üèÜ ELITE (90%+)"
          elif (( $(echo "$COMPETITIVE_RATE >= 75" | bc -l 2>/dev/null || echo 0) )); then
            PERFORMANCE_BADGE="üåü EXCELLENT (75%+)"
          elif (( $(echo "$COMPETITIVE_RATE >= 60" | bc -l 2>/dev/null || echo 0) )); then
            PERFORMANCE_BADGE="üëç GOOD (60%+)"
          elif (( $(echo "$COMPETITIVE_RATE >= 40" | bc -l 2>/dev/null || echo 0) )); then
            PERFORMANCE_BADGE="‚ö†Ô∏è FAIR (40%+)"
          else
            PERFORMANCE_BADGE="‚ùå NEEDS IMPROVEMENT (<40%)"
          fi

          echo "PERFORMANCE_BADGE=$PERFORMANCE_BADGE" >> $GITHUB_ENV
          echo "WIN_RATE=${WIN_RATE}%" >> $GITHUB_ENV
          echo "COMPETITIVE_RATE=${COMPETITIVE_RATE}%" >> $GITHUB_ENV
          echo "TOTAL_GAMES=$TOTAL_GAMES" >> $GITHUB_ENV
          echo "TIMEOUT_RATE=$TIMEOUT_RATE" >> $GITHUB_ENV
          echo "ELITE_GRADE=$ELITE_GRADE" >> $GITHUB_ENV

      - name: Set elite training results to variable
        uses: actions/github-script@v7
        id: elite-results-output
        with:
          script: |
            const fs = require('fs');
            let output = '';
            
            try {
              const training = fs.readFileSync('elite_training_results.log','utf8').toString();
              output += training + '\n\n';
            } catch(e) {
              output += 'Elite training results not available\n\n';
            }
            
            try {
              const analysis = fs.readFileSync('elite_analysis.log','utf8').toString();
              output += analysis + '\n\n';
            } catch(e) {
              output += 'Elite analysis not available\n\n';
            }
            
            try {
              const report = fs.readFileSync('elite_analysis_report.md','utf8').toString();
              output += '## üìä Detailed Analysis Report\n\n' + report;
            } catch(e) {
              output += 'Detailed report not available';
            }
            
            return output;
          result-encoding: string

      - name: Post elite training performance report
        uses: mshick/add-pr-comment@v2
        with:
          message: |
            # üß† Elite Battlesnake Training Report

            ## üéØ Elite Performance Summary
            - **Performance Grade**: ${{ env.PERFORMANCE_BADGE }}
            - **Win Rate**: ${{ env.WIN_RATE }}
            - **Competitive Rate**: ${{ env.COMPETITIVE_RATE }} (wins + draws)
            - **Games Analyzed**: ${{ env.TOTAL_GAMES }}
            - **Reliability**: ${{ env.TIMEOUT_RATE }} timeout rate
            - **Training Level**: ${{ env.ELITE_GRADE }}

            ## üöÄ Progress Toward 90% Goal
            $([ "$COMPETITIVE_RATE" -ge "90" ] 2>/dev/null && echo "üèÜ **GOAL ACHIEVED!** Elite performance reached!" || echo "‚è≥ Training continues toward 90% competitive rate target")

            ---

            ${{ steps.elite-results-output.outputs.result }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]'
          allow-repeats: false

  quick-validation:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '^1.17.1'

      - name: Build the Docker image
        run: docker build . --file Dockerfile --tag code-snek:pr
      - name: Setup Docker network
        run: docker network create test
      - name: Run the Docker image
        run: >
          docker run -d -p 4567:4567 -p 8081:8081 --network test 
          --name code-snek code-snek:pr

      - name: Wait for services to be ready
        run: |
          echo "Waiting for snake services to initialize..."
          sleep 10
          timeout 20 bash -c 'until curl -s http://localhost:4567/ > /dev/null; do sleep 1; done'
          timeout 20 bash -c 'until curl -s http://localhost:8081/ > /dev/null; do sleep 1; done'

      - name: Quick smoke test
        id: smoke-test
        run: |
          echo "üöÄ Running quick validation (5 games)..."
          docker run --rm --network test code-snek:pr script/simulate_royale --mode royale --map standard --width 11 --height 11 --runs 5 | tee -a quick_test.log

      - name: Set quick results to variable
        uses: actions/github-script@v7
        id: quick-results
        with:
          script: |
            const fs = require('fs');
            return fs.readFileSync('quick_test.log','utf8').toString();
          result-encoding: string

      - name: Post quick validation
        uses: mshick/add-pr-comment@v2
        with:
          message: |
            ## üöÄ Quick Validation Results

            ${{ steps.quick-results.outputs.result }}

            *Full comprehensive testing results will be posted separately*
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]'
          allow-repeats: false
